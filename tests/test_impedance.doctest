
>>> import numpy as np
>>> import razorback as rb

>>> factor = 2
>>> nsr = 1e-12

>>> time = np.linspace(0, 10, 5000)
>>> inputs = np.sin((time[-1]-time)**2)
>>> outputs = factor * inputs
>>> inputs += np.random.normal(scale=nsr, size=inputs.shape)
>>> outputs += np.random.normal(scale=nsr, size=outputs.shape)
>>> data = rb.SignalSet({'B': 0, 'E': 1}, rb.SyncSignal([inputs, outputs], 1, 0))

>>> freqs = np.logspace(np.log10(1e-1), np.log10(0.5), 5) * data.sampling_rates[0]


>>> T_ls, _, _ = rb.utils.impedance(data, freqs)  # doctest:+ELLIPSIS
starting frequency ...
>>> np.allclose(T_ls, factor)
True

>>> T_me, _, _ = rb.utils.impedance(data, freqs, weights=rb.weights.mest_weights)  # doctest:+ELLIPSIS
starting frequency ...
>>> np.allclose(T_me, factor)
True

>>> T_bi, _, _ = rb.utils.impedance(data, freqs, weights=rb.weights.bi_weights(0.1, 3, 1))  # doctest:+ELLIPSIS
starting frequency ...

>>> np.allclose(T_bi, factor)
True

>>> T_rr_ls, _, _ = rb.utils.impedance(data, freqs, remote='B')  # doctest:+ELLIPSIS
starting frequency ...

>>> np.allclose(T_rr_ls, factor)
True

